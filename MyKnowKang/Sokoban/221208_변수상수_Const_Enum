변수와 상수
    - 여러 사람이랑 협업을 하다 보면 건들지 말아야할 객체가 있을 것입니다.(ex. 게임의 버전)
      하지만 실수로 값을 바꿔버린다면 게임에 영향을 끼칠 것입니다.

    상수(Constant)
        - 상수로 만들어진 객체는 수정을 하려고하면 컴파일 단계에서 에러가 발생해 쉽게 찾을 수 있습니다.
        - 상수 중에서 많이 쓰는 사례가 바로 기호 상수입니다.

        const 키워드
        - 한정자 라는 키워드 중 하나입니다. 한정자를 붙이면 기능에 제한을 줍니다.
        - const 객체타입 객체이름; <<---- 이런 식으로 객체를 생성하면 상수가 됩니다.
        - 상수에는 상수값을 넣어줘야 합니다.
          int number = 10;
          const int number2 = number; <<--- 이런 식으로 코드를 작성하면 에러가 납니다.
        - 컴파일 단계에서는 number를 컴파일 타임에 계산이 안되고 런타임 때 계산이 되기 때문에
          상수에는 변수를 넣어줄 수가 없습니다.

          int number = 10;  <<---- 우리 눈에는 10이라고 보이지만 실제 런타임 때 값을 대입받습니다.
          Random random = new Random();
          number = random.Next();       <<---- 이런식으로 가면 컴파일 타임에서는 모릅니다.
          const int number2 = number; <<--- 그렇기 때문에 상수에 변수를 넣을 수가 없습니다.

          변수(의 대입의 경우 number1 = number 어셈블리어로 변환해보면( int number = 20; number1 = number; )
           -> 변수(number1)에 대입할 데이터(number)를 레지스터로 불러온다.( LOAD eax, number )
           -> 대입할 데이터(number)를 변수(number1)에 저장한다.( STORE ptr[number1], eax )
          변수에다가 상수를 대입하는 경우 어셈블리어로 변환해보면( const number = 10; number1 = number; )
           -> 변수(number1) 에 대입할 데이터(number)를 저장한다.( STORE ptr[number1], 10 )

        기호 상수(Symbolic Constant)
            - 사람은 숫자만 보면 이게 어떤 숫자인지 다양한 해석이 나오기 때문에 앞에 기호를 붙여서 어떤 상수인지 알 수 있게 해줘야 합니다.
            - 299792458 <<--- 이 것만 보면 이게 무슨 숫자인지 다양한 해석이 나올 수 있습니다.
            - const float SPEED_OF_LIGHT 299792458; <<-- 하지만 이걸 보면 빛의 속도구나 라고 명확히 알 수 있습니다.
            - 299792458 <<---- 여러 해석이 나올 수 있는 이런 상수를 매직 넘버라고 합니다.

        매직 넘버
            - 읽는 사람에 따라 해석이 달라지는 숫자라 매직 넘버라고 부릅니다.
            - 가독성이 떨어지기 때문에 상수에 이름을 붙혀 기호 상수로 표현해줘야 어떤 상수인지 바로 알 수 있습니다.

열거형
    - 여러 기호 상수를 묶기 위한 도구입니다.
    - 열거형도 하나의 타입입니다. 그렇기 때문에 열거형의 멤버들이 연관성 있어야 하며 열거형 객체에 넣어도 이상하지 않아야 합니다.
    - 기호 상수의 타입보다 열거형 타입으로 생성한 객체가 좀 더 구체적으로 데이터를 나타낼 수 있습니다.

    - 열거형 정의 방법
      enum 열거형이름 : ushort <<<--- 기본은 정수형으로 하면 int 4바이트인데 : ushort로 쓰면 2바이트 크기의 열거형이 됩니다.
      {
            멤버1,  <<---- 아무 값도 지정해주지 않으면 첫번째 멤버의 값은 0입니다.
            멤버2   <<---- 여기도 지정안해주면 이전멤버 + 1의 값(지금의 경우 1)
      }
    - 열거형의 멤버의 타입은 왠만하면 정수형입니다.

      // 이거 보단..
      const int DIRECTION_LEFT = 1;
      const int DIRECTION_RIGHT = 1;
      const int DIRECTION_UP = 1;
      const int DIRECTION_DOWN = 1;

      int direction = DIRECTION_LEFT;

      // 열거형으로 만드는게 더 보기 좋다( int 형 타입보단 Direction타입이 더 명확하게 무엇인지 알기 쉽다 )
      enum Direction 
      {
        Left = 1,
        Right = 2,
        Up = 3,
        Down = 4
      }

      Direction direction = Direction.Left;

    비트 플래그
        - 어떤 비트가 1일 때의 의미를 나타내기 위한 상수의 모음입니다.
        - 열거형으로 비트 플래그를 표현할 수 있습니다.